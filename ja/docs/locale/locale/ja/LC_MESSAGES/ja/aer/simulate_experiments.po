msgid ""
msgstr ""
"Project-Id-Version: qiskittranslation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-05 16:34+0000\n"
"PO-Revision-Date: 2019-06-05 16:56\n"
"Last-Translator: Soolu\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: qiskittranslation\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /poRepo/docs/locale/locale/ja/LC_MESSAGES/ja/aer/simulate_experiments.po\n"
"Language: ja_JP\n"

#: ../../../aer/simulate_experiments.rst:3
msgid "Simulating an Experiment"
msgstr ""

#: ../../../aer/simulate_experiments.rst:6
msgid "Introduction"
msgstr ""

#: ../../../aer/simulate_experiments.rst:8
msgid "This tutorial shows how to use Qiskit Aerâ„¢ to simulate execution of quantum circuits and return the measurement outcomes for the experiment."
msgstr ""

#: ../../../aer/simulate_experiments.rst:12
msgid "QasmSimulator"
msgstr ""

#: ../../../aer/simulate_experiments.rst:14
msgid "The ``QasmSimulator`` backend is designed to mimic an actual device. It executes a Qiskit ``QuantumCircuit`` and returns a count dictionary containing the final values of any classical registers in the circuit. The circuit may contain *gates* *measure*, *reset*, *conditionals*, and other advanced simulator options."
msgstr ""

#: ../../../aer/simulate_experiments.rst:20
msgid "Import the ``QasmSimulator``."
msgstr ""

#: ../../../aer/simulate_experiments.rst:33
msgid "Simulating a quantum circuit"
msgstr ""

#: ../../../aer/simulate_experiments.rst:35
msgid "The basic operation executes a quantum circuit and returns a counts dictionary of measurement outcomes. Here we execute a simple circuit that prepares a 2-qubit Bell-state :math:`|\\psi\\rangle = \\frac{1}{2}(|0,0\\rangle + |1,1 \\rangle)` and measures both qubits."
msgstr ""

#: ../../../aer/simulate_experiments.rst:41
msgid "Construct the quantum circuit."
msgstr ""

#: ../../../aer/simulate_experiments.rst:61
msgid "Select the QasmSimulator from the Aer provider."
msgstr ""

#: ../../../aer/simulate_experiments.rst:67
msgid "Execute the simulation, get counts, and plot the result."
msgstr ""

#: ../../../aer/simulate_experiments.rst:83
msgid "Returning measurements outcomes for each shot"
msgstr ""

#: ../../../aer/simulate_experiments.rst:85
msgid "The ``QasmSimulator`` also supports returning a list of measurement outcomes for each individual shot. This is enabled by setting the keyword argument ``memory=True`` in the ``compile`` or ``execute`` function."
msgstr ""

#: ../../../aer/simulate_experiments.rst:115
msgid "Starting simulation with a custom initial state"
msgstr ""

#: ../../../aer/simulate_experiments.rst:117
msgid "The ``QasmSimulator`` allows setting a custom initial statevector for the simulation. This means that all experiments in a Qobj will be executed starting in a state :math:`|\\psi\\rangle` rather than the all zero state :math:`|0,0,..0\\rangle`. The custom state may be set using the ``backend_options`` keyword argument for ``execute``, or the Aer backend ``run`` method."
msgstr ""

#: ../../../aer/simulate_experiments.rst:124
msgid "**Note:** \\* The initial statevector must be a valid quantum state :math:`|\\langle\\psi|\\psi\\rangle|=1`. If not an exception will be raised. \\* If a Qobj contains multiple circuits, the initial statevector must be the correct size for *all* experiments in the Qobj, otherwise an exception will be raised."
msgstr ""

#: ../../../aer/simulate_experiments.rst:130
msgid "We now demonstate this functionality be executing an empty circuit, but setting the simulator to be initialized in the the final Bell-state of the previous example:"
msgstr ""

