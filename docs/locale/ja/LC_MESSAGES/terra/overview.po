msgid ""
msgstr ""
"Project-Id-Version: qiskitdocs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-11 20:59+0000\n"
"PO-Revision-Date: 2019-06-15 01:36\n"
"Last-Translator: lzdanski\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: qiskitdocs\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /poRepo/docs/locale/en/LC_MESSAGES/terra/overview.po\n"
"Language: ja_JP\n"

#: ../../terra/overview.rst:2
msgid "Overview"
msgstr "概要"

#: ../../terra/overview.rst:4
msgid "Terra, the ‘earth’ element, is the foundation on which the rest of Qiskit lies. Terra provides a bedrock for composing quantum programs at the level of circuits and pulses, to optimize them for the constraints of a particular device, and to manage the execution of batches of experiments on remote-access devices. Terra defines the interfaces for a desirable end-user experience, as well as the efficient handling of layers of optimization, pulse scheduling and backend communication."
msgstr "「Terra」要素(「地」の意) は、他の要素「Aer」「Ignis」「Aqua」を支える土台になります。 量子プログラムの構成基盤を回路やパルスレベルで提供し、特定の装置の制約に対して最適化を行い、 リモート装置に対する複数の実験の実行を管理します。 「Terra」は素晴らしいユーザー体験インターフェースを定義すると同時に、効果的な最適化レイヤー処理、 パルススケジューリング、バックエンド通信を定義します。"

#: ../../terra/overview.rst:13
msgid "Terra Organization"
msgstr "Terra の構成"

#: ../../terra/overview.rst:15
msgid "Python example programs can be found in the *examples* directory, and test scripts are located in *test*. The *qiskit* directory is the main module of Terra. This module has six main parts."
msgstr "*examples* ディレクトリには Python サンプルプログラム、*test* ディレクトリにはテストスクリプトがあります。 *qiskit* ディレクトリが Terra のメインモジュールです。モジュールには次の6個の主要パーツがあります。"

#: ../../terra/overview.rst:21
msgid "Quantum Circuits"
msgstr "量子回路"

#: ../../terra/overview.rst:23
msgid "A quantum circuit is a model for quantum computing in which a computation is done by performing a sequence of quantum operations (usually gates) on a register of qubits. A quantum circuit usually starts with the qubits in the :math:`|0,…,0>` state (Terra assumes this unless otherwise specified) and these gates evolve the qubits to states that cannot be efficiently represented on a classical computer. To extract information on the state a quantum circuit must have a measurement which maps the outcomes (possible random due to the fundamental nature of quantum systems) to classical registers which can be efficiently represented."
msgstr "「量子回路」は量子コンピューティングのモデルです。「量子回路」内では qubit のレジスター上で一連の量子演算子 (通常はゲート) を操作することで計算を行います。通常「量子回路」は :math:`|0,…,0>` 状態の qubit から始まり (特に指定がない場合も)、qubit はゲートによって古典コンピュータでは効率的に表現できない状態に変えられます。 状態から情報を取得するには量子回路を測定する必要があります。測定は量子システムの根本的な性質により恐らくはランダムな出力を、 効率的に表現可能な古典レジスターにマップします。"

#: ../../terra/overview.rst:33
msgid "Transpiler"
msgstr "トランスパイラ"

#: ../../terra/overview.rst:35
msgid "A major part of research on quantum computing is working out how to run a quantum circuits on real devices.  In these devices, experimental errors and decoherence introduce errors during computation. Thus, to obtain a robust implementation it is essential to reduce the number of gates and the overall running time of the quantum circuit. The transpiler introduces the concept of a pass manager to allow users to explore optimization and find better quantum circuits for their given algorithm. We call it a transpiler as the end result is still a circuit."
msgstr "量子コンピューティング研究の多くは、実際の装置上でどのように量子回路を実行するかになります。 装置内では測定誤差とデコヒーレンスにより、計算中にエラーが入り込みます。 堅牢な実装を得るには、ゲート数と量子回路の総実行時間の削減が重要です。 「トランスパイラ」ではパスマネージャの概念を導入しました。 ユーザーは最適化を実行し、与えたアルゴリズムに対するより良い量子回路を発見できます。 最終結果が回路であることに変わりはないためトランスパイラと呼ばれます。"

#: ../../terra/overview.rst:45
msgid "Tools"
msgstr "ツール"

#: ../../terra/overview.rst:47
msgid "This directory contains tools that make working with Terra simpler. It contains functions that allow the user to execute quantum circuits and not worry about the optimization for a given backend. It also contains a compiler which uses the transpiler to map an array of quantum circuits to a `qobj` (quantum object) which can then be run on a backend. The `qobj` is a convenient representation (currently JSON) of the data that can be easily sent to the remote backends. It also has functions for monitoring jobs, backends, and parallelization of transpilation tasks."
msgstr "このディレクトリ内のツールを利用して Terra を簡単に利用できます。 「関数」を使用すると特定の「バックエンド」用最適化を気にせずに量子回路を実行できます。「コンパイラ」はトランスパイラを使用して、量子回路の配列を「バックエンド」で実行可能な qobj (quantum オブジェクト) にマップします。`qobj` はリモートの「バックエンド」に簡単に送信できる JSON 形式の便利な表現です。 ほかにジョブ、バックエンド、トランスパイラタスクの並列化を監視する関数もあります。"

#: ../../terra/overview.rst:56
msgid "Backends and Results"
msgstr "バックエンドと結果"

#: ../../terra/overview.rst:58
msgid "Once the user has made the `qobj` to run on the backend they need to have a convenient way of working with it. In Terra we do this using three parts: the *provider*, the *backend*, and the *job*."
msgstr "いったん「バックエンド」で実行する `qobj` を作成すると、次にこれを操作する便利な方法が必要になります。 「Terra」では、3つのパーツ「*プロバイダ*」「*バックエンド*」「*ジョブ*」を使用します。"

#: ../../terra/overview.rst:62
msgid "A *Provider* is an entity that provides access to a group of different backends (for example, backends available through the `IBM Q <https://www.research.ibm.com/ibm-q/technology/devices/>`_). It interacts with those backends to, for example, find out which ones are available, or retrieve an instance of a particular backend."
msgstr "「*プロバイダ*」は異なる「バックエンド」 (例えば `IBM Q <https://www.research.ibm.com/ibm-q/technology/devices/>`_ を介して利用可能なバックエンド) のグループ へのアクセスを提供します。 グループとやり取りをすることで現在利用可能な「バックエンド」を見つけたり、特定の「バックエンド」のインスタンスを取得できます。"

#: ../../terra/overview.rst:67
msgid "*Backends* represent either a simulator or a real quantum computer and are responsible for running quantum circuits and returning results. They have a run method which takes in a `qobj` as input and returns a `BaseJob` object. This object allows asynchronous running of jobs for retrieving results from a backend when the job is completed."
msgstr "「*バックエンド*」はシミュレータまたは実際の量子コンピュータを表し、量子回路の実行と結果に責任を持ちます。 run メソッドは `qobj` を入力に取り、`BaseJob` オブジェクトを返します。 このオブジェクトはジョブを非同期に実行し、ジョブが完了すると「バックエンド」から結果を取得します。"

#: ../../terra/overview.rst:72
msgid "*Job* instances can be thought of as the “ticket” for a submitted job. They find out the execution’s state at a given point in time (for example, if the job is queued, running, or has failed) and also allow control over the job."
msgstr ""

#: ../../terra/overview.rst:76
msgid "Once the job has finished Terra allows the results to be obtained from the remote backends using `result = job.result()`.  This result object holds the quantum data and the most common way of interacting with it is by using `result.get_counts(circuit)`. This method allows the user to get the raw counts from the quantum circuit and use them for more analysis with quantum inofrmation tools provided by Terra."
msgstr ""

#: ../../terra/overview.rst:85
msgid "Quantum Information"
msgstr ""

#: ../../terra/overview.rst:87
msgid "To perform more advance algorithms and analysis of the circuits run on the quantum computer it is important to have tools to perform simple quantum information tasks. These include methods to estimate metrics on and generate quantum states, operations, and channels."
msgstr ""

#: ../../terra/overview.rst:93
msgid "Visualization Tools"
msgstr ""

#: ../../terra/overview.rst:95
msgid "In Terra we have many tools to visualize a quantum circuit. This allows a quick inspection of the quantum circuit to make sure it is what the user wanted to implement. There is a text, python and latex version. Once the circuit has run it is important to be able to view the output. There is a simple function (`plot_histogram`) to plot the results from a quantum circuit including an interactive version. There is also a function `plot_state` and ` plot_bloch_vector` that allow the plotting of a quantum state. These functions are usually only used when using the `statevector_simulator` backend but can also be used on real data after running state tomography experiments (ignis)."
msgstr ""

