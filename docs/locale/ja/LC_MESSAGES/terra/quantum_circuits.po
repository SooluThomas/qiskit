msgid ""
msgstr ""
"Project-Id-Version: qiskitdocs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-11 20:59+0000\n"
"PO-Revision-Date: 2019-06-18 04:35\n"
"Last-Translator: lzdanski\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: qiskitdocs\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /poRepo/docs/locale/en/LC_MESSAGES/terra/quantum_circuits.po\n"
"Language: ja_JP\n"

#: ../../terra/quantum_circuits.rst:3
msgid "Circuits and Registers"
msgstr "回路とレジスタ"

#: ../../terra/quantum_circuits.rst:5
msgid "The ``QuantumCircuit``, ``QuantumRegister``, and ``ClassicalRegister`` are the main objects for Qiskit Terra. You can create custom circuits, combine existing circuits, manipulate a circuit's structure, and index into circuit elements."
msgstr "``QuantumCircuit``, ``QuantumRegister``, ``ClassicalRegister`` はそれぞれ、Qiskit Terraのmain objects になります。オリジナルのカスタム回路をつくったり、既存の回路を組み合わせたり、回路の構造を改変したり、回路の要素にインデックスをつけたりすることができます。"

#: ../../terra/quantum_circuits.rst:10
msgid "The following imports will be used in the examples below."
msgstr "以下に例を示します。"

#: ../../terra/quantum_circuits.rst:23
msgid "Creating Registers"
msgstr "レジスタの作成"

#: ../../terra/quantum_circuits.rst:25
msgid "Quantum and classical registers are declared using the following:"
msgstr "以下を用いて量子及び古典のレジスタを宣言します。"

#: ../../terra/quantum_circuits.rst:35
msgid "The name is optional. If not given Qiskit will name it ``qi`` where ``i`` is an integer which will count from 0. The name and size can be returned using the following:"
msgstr "名前は任意です。特に指定しない場合, Qiskitがデフォルトで\"qi\"と名付けます。このとい\"i\"は0から始まる整数です。名前とサイズは以下のコマンドで確認できます。"

#: ../../terra/quantum_circuits.rst:49
msgid "You can test if the register are the same or different."
msgstr "レジスタが異なるかどうかをテストすることができます。"

#: ../../terra/quantum_circuits.rst:79
msgid "Creating Circuits"
msgstr "回路を作成する"

#: ../../terra/quantum_circuits.rst:81
msgid "Quantum Circuits are made using registers. Either when initiated or by using the ``add_register`` command."
msgstr "量子回路初期化の際、または\"add_register\"コマンドではレジスタで作成されます。"

#: ../../terra/quantum_circuits.rst:94
msgid "is the same as"
msgstr "と同じ"

#: ../../terra/quantum_circuits.rst:111
msgid "The order of registers in the list is the order they are initiated or added **not** the tensor product for quantum registers."
msgstr "リスト上のレジスタは、量子レジスタのテンソル積としてではなく、初期化または\"add_register\"で追加された順番で表示されます。"

#: ../../terra/quantum_circuits.rst:130
msgid "The circuit drawer has the last register added at the bottom and if we add a new register it will add it to the bottom of the circuit."
msgstr "回路drawerは最下にﾚｼﾞｽﾀｰを持ち、新たなﾚｼﾞｽﾀｰが追加される場合は最後尾に追加されます。"

#: ../../terra/quantum_circuits.rst:133
msgid "Circuits can also be created without predefined registers. Instead, you can supply the the number of qubits (required) and the number of classical bits (optional) to ``QuantumCircuit()``."
msgstr "回路は事前定義のﾚｼﾞｽﾀｰを無しで作成することもでき、代わりに必須で量子ﾋﾞｯﾄの数と任意旧来ﾋﾞｯﾄの数を決めることができます。"

#: ../../terra/quantum_circuits.rst:143
msgid "With this syntax, registers are created automatically and can be accessed as properties of the ``QuantumCircuit``."
msgstr "この文法で、ﾚｼﾞｽﾀｰは自動的に作成され、”量子回路”特性でｱｸｾｽされます。"

#: ../../terra/quantum_circuits.rst:156
msgid "Qubits and bits can be indexed directly, without indexing into a ``QuantumRegister``. A gate's expected argument types will determine whether an index refers to a qubit or a bit. For example, ``cx`` expects a qubit followed by a bit."
msgstr ""

#: ../../terra/quantum_circuits.rst:176
msgid "The indexing method above works for ``QuantumCircuit`` objects constructed with or without predefined ``QuantumRegister`` objects."
msgstr "上記のインデキシングの方式は、あらかじめ定義した``QuantumRegister`` を使って作成したか否かに関わらず`、`QuantumCircuit``オブジェクト上で動作します。"

#: ../../terra/quantum_circuits.rst:179
msgid "For circuits with multiple registers, index ordering will correspond to the order registers were added to the circuit, and can be verified by inspecting the circuit's ``qubits`` and ``clbits`` properties."
msgstr "複数のレジスタを持つ回路では、インデックスの順序は回路にレジスターが追加された順序に対応し、回路の``qubits`` 、 ``clbits`` プロパティを調べることで確認できます。"

#: ../../terra/quantum_circuits.rst:205
msgid "Concatenating Circuits"
msgstr "回路の結合"

#: ../../terra/quantum_circuits.rst:207
msgid "In many situations you may have two circuits that you want to concatenate together to form a new circuit. This is very useful when one circuit has no measurements and the final circuit represents a measurement."
msgstr "2つの回路を結合して、1つの新しい回路を作成したい場合が多くあります。ある回路が測定を持たず、最後の回路で測定させるとき、特に便利な手法です。"

#: ../../terra/quantum_circuits.rst:264
msgid "The new register is added to the circuit:"
msgstr "新しいレジスタを回路に追加します。"

#: ../../terra/quantum_circuits.rst:274
msgid "We have also overloaded ``+=`` to the ``QuantumCircuit`` object:"
msgstr "``+=``も``QuantumCircuit`` オブジェクトに対してオーバーロードされてます。"

#: ../../terra/quantum_circuits.rst:287
msgid "Examining Circuit Results"
msgstr "回路結果の検査"

#: ../../terra/quantum_circuits.rst:289
msgid "In the circuit output, the most significant bit (MSB) is to the left and the least significant bit (LSB) is to the right (i.e. we follow the regular computer science little endian ordering). In this example:"
msgstr ""

#: ../../terra/quantum_circuits.rst:300
msgid "qqubit register :math:`Q_0` is prepared in the state :math:`|10\\rangle` and :math:`Q_1` is in the state :math:`|01\\rangle` giving a total state :math:`|0110\\rangle` (:math:`Q1\\otimes Q0`)."
msgstr ""

#: ../../terra/quantum_circuits.rst:306
msgid "The tensor order in Qiskit goes as :math:`Q_n \\otimes .. Q_1 \\otimes Q_0`"
msgstr ""

#: ../../terra/quantum_circuits.rst:308
msgid "That is the four qubit statevector of length 16 with the 6th element (``int('0110',2)=6``) being one. Note the element count starts from zero."
msgstr ""

#: ../../terra/quantum_circuits.rst:326
msgid "To check the fidelity of this state with the ``basis_state`` in Qiskit Terra you can use:"
msgstr ""

#: ../../terra/quantum_circuits.rst:342
msgid "We can also use Qiskit Terra to make the unitary operator representing the circuit (provided there are no measurements). This will be a :math:`16\\times16` matrix equal to :math:`I\\otimes X\\otimes X\\otimes I`. To check this is correct we can use the ``Pauli`` class and the ``process_fidelity`` function."
msgstr ""

#: ../../terra/quantum_circuits.rst:364
msgid "To map the information of the quantum state to the classial world we have to use the example with measurements ``qc``:"
msgstr ""

#: ../../terra/quantum_circuits.rst:381
msgid "This will map the quantum state to the classical world and since the state has no superpositions it will be deterministic and equal to ``'01 10'``. Here a space is used to separate the registers."
msgstr ""

#: ../../terra/quantum_circuits.rst:398
msgid "To show that it does not matter how you add the registers we run the same as above on the second example circuit:"
msgstr ""

#: ../../terra/quantum_circuits.rst:452
msgid "Determining Circuit Resources"
msgstr ""

#: ../../terra/quantum_circuits.rst:454
msgid "A ``QuantumCircuit`` object provides methods for inquiring its resource use. This includes the number of qubits, operations, and a few other things."
msgstr ""

