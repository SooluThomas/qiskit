# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Qiskit Development Team
# This file is distributed under the same license as the Qiskit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-27 19:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../aqua/reciprocals.rst:5
msgid "Reciprocals"
msgstr ""

#: ../../aqua/reciprocals.rst:7
msgid ""
"Aqua bundles methods to invert a fixed-point number prepared in a quantum"
" register in the Reciprocals library. Rather than being used as a "
"standalone algorithm, the members of the library are to be used in a "
"larger algorithm such as :ref:`HHL`. The following methods are available"
msgstr ""

#: ../../aqua/reciprocals.rst:11
msgid ":ref:`lookup`"
msgstr ""

#: ../../aqua/reciprocals.rst:13
msgid ":ref:`longdivision`"
msgstr ""

msgid "Extending the Reciprocals Library"
msgstr ""

#: ../../aqua/reciprocals.rst:17
msgid ""
"Consistent with its unique design, Aqua has a modular and extensible "
"architecture. Algorithms and their supporting objects, such as optimizers"
" for quantum variational algorithms, are pluggable modules in Aqua. New "
"eigenvalue solver are typically installed in the "
"``qiskit/aqua/components/reciprocals`` folder and derive from the "
"``Reciprocal`` class.  Aqua also allows for :ref:`aqua-dynamically-"
"discovered-components`: new methods to calculate the reciprocal can "
"register themselves as Aqua extensions and be dynamically discovered at "
"run time independent of their location in the file system. This is done "
"in order to encourage researchers and developers interested in :ref"
":`aqua-extending` to extend the Aqua framework with their novel research "
"contributions."
msgstr ""

#: ../../aqua/reciprocals.rst:33
msgid "Partial Table Look Up"
msgstr ""

#: ../../aqua/reciprocals.rst:35
msgid ""
"This method applies a variable sized binning to the values. Only a "
"specified number of bits after the most-significant bit is taken into "
"account when assigning rotation angles to the numbers prepared as states "
"in the input register. Using precomputed angles, the reciprocal is "
"multiplied to the amplitude via controlled rotations. While no resolution"
" of the result is lost for small values, towards larger values the bin "
"size increases. The accuracy of the result is tuned by the parameters. "
"The following parameters are exposed:"
msgstr ""

#: ../../aqua/reciprocals.rst:42
msgid "The number of bits used to approximate the numbers:"
msgstr ""

#: ../../aqua/reciprocals.rst:48
msgid ""
"Specifies the number of bits following the most-significant bit that is "
"used to identify a number. This leads to a binning of large values, while"
" preserving the accuracy for smaller values. It should be chosen as "
":math:`min(k-1,5)` for an input register with k qubits to limit the error"
" in the rotation to < 3%."
msgstr ""

#: ../../aqua/reciprocals.rst:53
msgid "The length of a sub string of the binary identifier:"
msgstr ""

#: ../../aqua/reciprocals.rst:59
msgid ""
"This parameter is computed in the circuit creation routine and helps "
"reducing the gate count. For ``pat_length<=5`` it is chosen as "
":math:`\\left\\lceil(\\frac{patlength}{2})\\right\\rceil`."
msgstr ""

#: ../../aqua/reciprocals.rst:62 ../../aqua/reciprocals.rst:143
msgid "Switch for negative values:"
msgstr ""

#: ../../aqua/reciprocals.rst:68 ../../aqua/reciprocals.rst:149
msgid ""
"If known beforehand that only positive values are present, one can set "
"this switch to False and achieve a higher resolution in the output. The "
"default is ``True``."
msgstr ""

#: ../../aqua/reciprocals.rst:71 ../../aqua/reciprocals.rst:123
msgid "The scale factor of the values:"
msgstr ""

#: ../../aqua/reciprocals.rst:77 ../../aqua/reciprocals.rst:129
msgid ""
"This parameter is used to scale the reciprocals such that for a scale C, "
"the rotation is performed by an angle "
":math:`\\arcsin{\\frac{C}{\\lambda}}`. If neither the ``scale`` nor the "
"``evo_time`` and ``min_lambda`` parameters are specified, the smallest "
"resolvable Eigenvalue is used."
msgstr ""

#: ../../aqua/reciprocals.rst:82
msgid "The minimum value present:"
msgstr ""

#: ../../aqua/reciprocals.rst:88 ../../aqua/reciprocals.rst:158
msgid ""
"If the minimum value is known beforehand, the optimal ``scale`` parameter"
" can be calculated using the parameters ``lambda_min`` and ``evo_time``."
msgstr ""

#: ../../aqua/reciprocals.rst:91 ../../aqua/reciprocals.rst:161
msgid "The evolution time:"
msgstr ""

#: ../../aqua/reciprocals.rst:97
msgid ""
"This parameter scales the Eigenvalues in the qpe component onto the range"
" (0,1] ( (-0.5,0.5] for negativ EV ). If the Partial Table Look Up is "
"used together with the QPE, the scale parameter can be estimated if the "
"minimum EV and the evolution time are passed as parameters. The default "
"is ``None``."
msgstr ""

msgid "Declarative Name"
msgstr ""

#: ../../aqua/reciprocals.rst:104
msgid ""
"When referring to Look Up declaratively inside Aqua, its code ``name``, "
"by which Aqua dynamically discovers and loads it, is ``Lookup``."
msgstr ""

#: ../../aqua/reciprocals.rst:112
msgid "Long Division"
msgstr ""

#: ../../aqua/reciprocals.rst:114
msgid ""
"This method calculates inverse of eigenvalues using binary long division "
"and performs the corresponding rotation. Long division is implemented as "
"a sequence of subtraction (utilizing ripple carry adder module) and bit "
"shifting. The method allows for adjusting of the reciprocal precision by "
"changing number of iterations. The method was optimized for register "
"conventions used in HHL algorithm (i.e. eigenvalues rescaled to values "
"between 0 and 1)."
msgstr ""

#: ../../aqua/reciprocals.rst:120
msgid ""
"The rotation value is always scaled down additionally to the normal scale"
" parameter by 0.5 to get the angle into the linear part of the arcsin(x)."
" The following parameters are exposed:"
msgstr ""

#: ../../aqua/reciprocals.rst:133
msgid "The number of ancillae:"
msgstr ""

#: ../../aqua/reciprocals.rst:139
msgid ""
"This parameter sets the number of ancillary qubits (the input register "
"size).  A positive ``int`` value is expected. The default value is "
"``None`` and the minimum value ``3``. If negative eigenvalues are "
"enabled, the minimum value is ``4 ``The default is ``0``."
msgstr ""

#: ../../aqua/reciprocals.rst:152
msgid "The mimimum value present:"
msgstr ""

#: ../../aqua/reciprocals.rst:167
msgid ""
"This parameter scales the Eigenvalues in the qpe component onto the range"
" (0,1] ( (-0.5,0.5] for negative EV ). If the Partial Table Look Up is "
"used together with the QPE, the scale parameter can be estimated if the "
"minimum EV and the evolution time are passed as parameters. The default "
"is ``None``."
msgstr ""

#: ../../aqua/reciprocals.rst:172
msgid "The Reciprocal precision:"
msgstr ""

#: ../../aqua/reciprocals.rst:178
msgid ""
"The parameter sets minimum desired bit precision for the reciprocal. Due "
"to shifting some of reciprocals, however, are effectively estimated with "
"higher than this minimum specified precision."
msgstr ""

#: ../../aqua/reciprocals.rst:183
msgid ""
"When referring to Long Division declaratively inside Aqua, its code "
"``name``, by which Aqua dynamically discovers and loads it, is "
"``LongDivision``."
msgstr ""

